// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// CoinFlipExploitMetaData contains all meta data concerning the CoinFlipExploit contract.
var CoinFlipExploitMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"exploit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// CoinFlipExploitABI is the input ABI used to generate the binding from.
// Deprecated: Use CoinFlipExploitMetaData.ABI instead.
var CoinFlipExploitABI = CoinFlipExploitMetaData.ABI

// CoinFlipExploit is an auto generated Go binding around an Ethereum contract.
type CoinFlipExploit struct {
	CoinFlipExploitCaller     // Read-only binding to the contract
	CoinFlipExploitTransactor // Write-only binding to the contract
	CoinFlipExploitFilterer   // Log filterer for contract events
}

// CoinFlipExploitCaller is an auto generated read-only Go binding around an Ethereum contract.
type CoinFlipExploitCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CoinFlipExploitTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CoinFlipExploitTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CoinFlipExploitFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CoinFlipExploitFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CoinFlipExploitSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CoinFlipExploitSession struct {
	Contract     *CoinFlipExploit  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CoinFlipExploitCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CoinFlipExploitCallerSession struct {
	Contract *CoinFlipExploitCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// CoinFlipExploitTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CoinFlipExploitTransactorSession struct {
	Contract     *CoinFlipExploitTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// CoinFlipExploitRaw is an auto generated low-level Go binding around an Ethereum contract.
type CoinFlipExploitRaw struct {
	Contract *CoinFlipExploit // Generic contract binding to access the raw methods on
}

// CoinFlipExploitCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CoinFlipExploitCallerRaw struct {
	Contract *CoinFlipExploitCaller // Generic read-only contract binding to access the raw methods on
}

// CoinFlipExploitTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CoinFlipExploitTransactorRaw struct {
	Contract *CoinFlipExploitTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCoinFlipExploit creates a new instance of CoinFlipExploit, bound to a specific deployed contract.
func NewCoinFlipExploit(address common.Address, backend bind.ContractBackend) (*CoinFlipExploit, error) {
	contract, err := bindCoinFlipExploit(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CoinFlipExploit{CoinFlipExploitCaller: CoinFlipExploitCaller{contract: contract}, CoinFlipExploitTransactor: CoinFlipExploitTransactor{contract: contract}, CoinFlipExploitFilterer: CoinFlipExploitFilterer{contract: contract}}, nil
}

// NewCoinFlipExploitCaller creates a new read-only instance of CoinFlipExploit, bound to a specific deployed contract.
func NewCoinFlipExploitCaller(address common.Address, caller bind.ContractCaller) (*CoinFlipExploitCaller, error) {
	contract, err := bindCoinFlipExploit(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CoinFlipExploitCaller{contract: contract}, nil
}

// NewCoinFlipExploitTransactor creates a new write-only instance of CoinFlipExploit, bound to a specific deployed contract.
func NewCoinFlipExploitTransactor(address common.Address, transactor bind.ContractTransactor) (*CoinFlipExploitTransactor, error) {
	contract, err := bindCoinFlipExploit(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CoinFlipExploitTransactor{contract: contract}, nil
}

// NewCoinFlipExploitFilterer creates a new log filterer instance of CoinFlipExploit, bound to a specific deployed contract.
func NewCoinFlipExploitFilterer(address common.Address, filterer bind.ContractFilterer) (*CoinFlipExploitFilterer, error) {
	contract, err := bindCoinFlipExploit(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CoinFlipExploitFilterer{contract: contract}, nil
}

// bindCoinFlipExploit binds a generic wrapper to an already deployed contract.
func bindCoinFlipExploit(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CoinFlipExploitABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CoinFlipExploit *CoinFlipExploitRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CoinFlipExploit.Contract.CoinFlipExploitCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CoinFlipExploit *CoinFlipExploitRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoinFlipExploit.Contract.CoinFlipExploitTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CoinFlipExploit *CoinFlipExploitRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CoinFlipExploit.Contract.CoinFlipExploitTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CoinFlipExploit *CoinFlipExploitCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CoinFlipExploit.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CoinFlipExploit *CoinFlipExploitTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoinFlipExploit.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CoinFlipExploit *CoinFlipExploitTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CoinFlipExploit.Contract.contract.Transact(opts, method, params...)
}

// Exploit is a paid mutator transaction binding the contract method 0x63d9b770.
//
// Solidity: function exploit() returns()
func (_CoinFlipExploit *CoinFlipExploitTransactor) Exploit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoinFlipExploit.contract.Transact(opts, "exploit")
}

// Exploit is a paid mutator transaction binding the contract method 0x63d9b770.
//
// Solidity: function exploit() returns()
func (_CoinFlipExploit *CoinFlipExploitSession) Exploit() (*types.Transaction, error) {
	return _CoinFlipExploit.Contract.Exploit(&_CoinFlipExploit.TransactOpts)
}

// Exploit is a paid mutator transaction binding the contract method 0x63d9b770.
//
// Solidity: function exploit() returns()
func (_CoinFlipExploit *CoinFlipExploitTransactorSession) Exploit() (*types.Transaction, error) {
	return _CoinFlipExploit.Contract.Exploit(&_CoinFlipExploit.TransactOpts)
}

